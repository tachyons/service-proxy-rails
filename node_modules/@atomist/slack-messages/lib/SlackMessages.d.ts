/**
 * Type defining the MIME types that the Slack message API accepts.
 */
export declare type MessageMimeType = "application/x-atomist-slack+json" | "application/x-atomist-slack-file+json" | "text/plain" | "application/json";
/**
 * Helper constants for the MIME types the Slack message API accepts.
 */
export declare const MessageMimeTypes: {
    [key: string]: MessageMimeType;
};
/**
 * Construct and render slack messages according to Slack message
 * formatting: https://api.slack.com/docs/message-formatting. Customize
 * messages with rug actions.
 */
/**
 * Encode special Slack characters and HTML entities.
 */
export declare function escape(text: string): string;
/**
 * Constructs slack link.
 * Label is automatically escaped.
 */
export declare function url(fullUrl: string, label?: string): string;
/**
 * Mentions user (e.g. @anna).
 * When userName is provided will add readable user name.
 *
 * @param userId Slack user ID
 * @param userName alternative user name, which Slack seems to ignore
 * @return properly formatted Slack user mention
 */
export declare function user(userId: string, userName?: string): string;
/**
 * Mentions channel (e.g. #general).
 * Will mention specific channel by channelId.
 * When channelName is provided will add readable channel name.
 */
export declare function channel(channelId: string, channelName?: string): string;
/** Mentions @channel */
export declare function atChannel(): string;
/** Mentions here (@here) */
export declare function atHere(): string;
/** Mentions everyone (@everyone) */
export declare function atEveryone(): string;
/** Renders JSON representation of slack message. */
export declare function render(message: SlackMessage, pretty?: boolean): string;
/** Render emoji by name */
export declare function emoji(name: string): string;
/** Render bold text */
export declare function bold(text: string): string;
/** Render italic text */
export declare function italic(text: string): string;
/** Render strike-through text */
export declare function strikethrough(text: string): string;
/** Render single line code block */
export declare function codeLine(text: string): string;
/** Render multiline code block */
export declare function codeBlock(text: string): string;
/** Render bullet list item */
export declare function listItem(item: string): string;
/** Represents slack message object. */
export interface SlackMessage {
    text?: string;
    attachments?: Attachment[];
    unfurl_links?: boolean;
    unfurl_media?: boolean;
}
/**
 * Represent slack attachment.
 * https://api.slack.com/docs/interactive-message-field-guide#attachment_fields
 */
export interface Attachment {
    text?: string;
    fallback: string;
    mrkdwn_in?: string[];
    color?: string;
    pretext?: string;
    author_name?: string;
    author_link?: string;
    author_icon?: string;
    title?: string;
    title_link?: string;
    fields?: Field[];
    image_url?: string;
    thumb_url?: string;
    footer?: string;
    footer_icon?: string;
    ts?: number;
    actions?: Action[];
    callback_id?: string;
    attachment_type?: string;
}
/** Represents slack attachment field. */
export interface Field {
    title?: string;
    value?: string;
    short?: boolean;
}
export interface SelectOption {
    text: string;
    value: string;
}
export interface OptionGroup {
    text: string;
    options: SelectOption[];
}
export declare type DataSource = "static" | "users" | "channels" | "conversations" | "external";
/**
 * Represents Slack action.
 * Only button is currently supported.
 */
export interface Action {
    text: string;
    name: string;
    type: ActionType;
    value?: string;
    style?: string;
    confirm?: ActionConfirmation;
    options?: SelectOption[];
    option_groups?: OptionGroup[];
    data_source?: DataSource;
}
/** Represents Slack action confirmation. */
export interface ActionConfirmation {
    title?: string;
    text: string;
    ok_text?: string;
    dismiss_text?: string;
}
export declare type ActionType = "button" | "select";
