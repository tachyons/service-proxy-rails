import dedent from 'dedent';
export const errorMsg = dedent`parse-commit-message: expect \`commit\` to follow:
<type>[optional scope]: <description>

[optional body]

[optional footer]`;
export function isValidString(x) {
  return Boolean(x && typeof x === 'string' && x.length > 0);
}
export function stringToHeader(val, caseSensitive) {
  const sensitive = caseSensitive || false;
  const regex = sensitive ? /^(\w+)(?:\((.+)\))?: (.+)/ : /^(\w+)(?:\((.+)\))?: (.+)/i;

  if (!regex.test(val)) {
    throw new TypeError(errorMsg);
  }

  const matches = regex.exec(val).slice(1);

  if (!matches) {
    throw new Error(errorMsg);
  }

  const [type, scope = null, subject] = matches;
  return {
    type,
    scope,
    subject
  };
}
export function normalizeCommit(commit) {
  const {
    header
  } = commit;

  if (header && typeof header === 'object' && 'value' in header) {
    return Object.assign({}, commit, {
      header: stringToHeader(header.value)
    });
  }

  return commit;
}
export function getValue(obj, key) {
  return key in obj ? obj[key] : '';
}
export function toArray(val) {
  if (!val) return [];
  if (Array.isArray(val)) return val;
  return [val];
}