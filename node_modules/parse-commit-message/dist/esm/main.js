import { parseCommit, stringifyCommit, checkCommit } from './commit';
import { toArray } from './utils';
export function parse(commits) {
  const result = toArray(commits).filter(Boolean).reduce((acc, val) => {
    if (typeof val === 'string') {
      return acc.concat(parseCommit(val));
    }

    if (typeof val === 'object' && !Array.isArray(val)) {
      return acc.concat(val);
    }

    return acc.concat(parse(val));
  }, []);
  return result;
}
export function stringify(commits) {
  const result = toArray(commits).filter(Boolean).reduce((acc, val) => acc.concat(toArray(check(typeof val === 'string' ? {
    header: {
      value: val
    }
  } : val)).map(x => stringifyCommit(x))), []);
  return result;
}
export function validate(commits) {
  const result = {};

  try {
    result.value = check(commits);
  } catch (err) {
    return {
      error: err
    };
  }

  return result;
}
export function check(commits) {
  const result = toArray(commits).filter(x => x !== null || x !== undefined).reduce((acc, commit) => {
    if (typeof commit === 'string') {
      commit = parseCommit(commit);
    }

    return acc.concat(checkCommit(commit));
  }, []);
  return result;
}