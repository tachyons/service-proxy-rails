import { isValidString, stringToHeader } from './utils';
export function parseHeader(header) {
  if (!isValidString(header)) {
    throw new TypeError('expect `header` to be non empty string');
  }

  return stringToHeader(header.trim());
}
export function stringifyHeader(header) {
  const res = validateHeader(header);

  if (res.error) {
    throw res.error;
  }

  if (res.value && typeof res.value === 'object' && 'value' in res.value) {
    return res.value.value;
  }

  const {
    type,
    scope,
    subject
  } = res.value;
  return `${type}${scope ? `(${scope})` : ''}: ${subject}`.trim();
}
export function validateHeader(header) {
  const result = {};

  try {
    result.value = checkHeader(header);
  } catch (err) {
    return {
      error: err
    };
  }

  return result;
}
export function checkHeader(header, caseSensitive) {
  const sensitive = caseSensitive || false;

  if (header && typeof header === 'object' && 'value' in header) {
    const {
      value
    } = header;
    return stringToHeader(value, sensitive);
  }

  if (!isValidString(header.type)) {
    throw new TypeError('header.type should be non empty string');
  }

  if (!isValidString(header.subject)) {
    throw new TypeError('header.subject should be non empty string');
  }

  const isValidScope = 'scope' in header && header.scope !== null ? isValidString(header.scope) : true;

  if (!isValidScope) {
    throw new TypeError('commit.header.scope should be non empty string when given');
  }

  return Object.assign({
    scope: null
  }, header);
}