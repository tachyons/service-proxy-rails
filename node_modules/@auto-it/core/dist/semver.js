"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var SEMVER;
(function (SEMVER) {
    SEMVER["major"] = "major";
    SEMVER["premajor"] = "premajor";
    SEMVER["minor"] = "minor";
    SEMVER["preminor"] = "preminor";
    SEMVER["patch"] = "patch";
    SEMVER["prepatch"] = "prepatch";
    SEMVER["noVersion"] = "";
})(SEMVER || (SEMVER = {}));
exports.preVersionMap = new Map([
    [SEMVER.major, SEMVER.premajor],
    [SEMVER.minor, SEMVER.preminor],
    [SEMVER.patch, SEMVER.prepatch],
]);
exports.default = SEMVER;
/** Given two labels determine the next SEMVER bump. */
function getHigherSemverTag(left, right) {
    if (left === SEMVER.major || right === SEMVER.major) {
        return SEMVER.major;
    }
    if (left === SEMVER.minor || right === SEMVER.minor) {
        return SEMVER.minor;
    }
    return SEMVER.patch;
}
exports.getHigherSemverTag = getHigherSemverTag;
/**
 * Determine the version bump from the labels on merged PRs.
 * Respects skip-release labels and the "onlyPublishWithReleaseLabel"
 * strategy.
 */
function calculateSemVerBump(labels, labelMap, { onlyPublishWithReleaseLabel } = {}) {
    const labelSet = new Set();
    const skipReleaseLabels = labelMap.get("skip") || [];
    labels.forEach((pr, index) => {
        // If the head pr has no labels we default to a patch
        if (pr.length === 0 && index === 0) {
            labelSet.add(SEMVER.patch);
        }
        pr.forEach((label) => {
            const userLabel = [...labelMap.entries()].find((pair) => pair[1].includes(label));
            if (userLabel) {
                labelSet.add(userLabel[0]);
            }
        });
    });
    const lastMergedCommitLabels = labels[0] || [];
    const releaseLabels = labelMap.get("release") || [];
    const skipRelease = onlyPublishWithReleaseLabel
        ? !lastMergedCommitLabels.some((label) => releaseLabels.includes(label))
        : lastMergedCommitLabels.some((label) => skipReleaseLabels.includes(label));
    // If PRs only have none or skip labels, skip the release
    const onlyNoReleaseLabels = [...labelSet].reduce((condition, releaseType) => condition && (releaseType === "none" || releaseType === "skip"), true);
    if (labelSet.size > 0 && onlyNoReleaseLabels) {
        return SEMVER.noVersion;
    }
    const version = [...labelSet].reduce(getHigherSemverTag, SEMVER.patch);
    if (skipRelease) {
        return SEMVER.noVersion;
    }
    return version;
}
exports.calculateSemVerBump = calculateSemVerBump;
//# sourceMappingURL=semver.js.map