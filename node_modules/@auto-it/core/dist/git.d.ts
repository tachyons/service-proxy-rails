import { Octokit } from "@octokit/rest";
import { HttpsProxyAgent } from "https-proxy-agent";
import { ILabelDefinition } from "./release";
import { ILogger } from "./utils/logger";
import { ICommit } from "./log-parse";
declare type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>> & Partial<Pick<T, K>>;
export declare type IPRInfo = Omit<Octokit.ReposCreateStatusParams, "owner" | "repo">;
export interface IGitOptions {
    /** Github repo owner (user) */
    owner: string;
    /** GitHub project to operate on */
    repo: string;
    /** The URL to the GitHub (public or enterprise) the project is using */
    baseUrl?: string;
    /** The main branch of the repo. Usually master */
    baseBranch: string;
    /** The URL to the GitHub graphql API (public or enterprise) the project is using */
    graphqlBaseUrl?: string;
    /** A token to auth to GitHub with */
    token?: string;
    /** An optional proxy agent to route requests through */
    agent?: HttpsProxyAgent;
}
/**
 * A class to interact with the local git instance and the git remote.
 * currently it only interfaces with GitHub.
 */
export default class Git {
    /** An octokit instance to use to interact with GitHub */
    readonly github: Octokit;
    /** Options the git client was initialized with */
    readonly options: IGitOptions;
    /** The GitHub api to communicate with through octokit */
    private readonly baseUrl;
    /** The GitHub graphql api to communicate with through octokit */
    private readonly graphqlBaseUrl;
    /** A logger that uses log levels */
    private readonly logger;
    /** Initialize the git interface and auth with GitHub */
    constructor(options: IGitOptions, logger?: ILogger);
    /** Verify the write access authorization to remote repository with push dry-run. */
    verifyAuth(url: string): Promise<boolean>;
    /** Get the "Latest Release" from GitHub */
    getLatestReleaseInfo(): Promise<Octokit.ReposGetLatestReleaseResponse>;
    /** Get the "Latest Release" or the first commit SHA as a fallback */
    getLatestRelease(): Promise<string>;
    /** Get the date a commit sha was created */
    getCommitDate(sha: string): Promise<string>;
    /** Get the first commit for the repo */
    getFirstCommit(): Promise<string>;
    /** Get the SHA of the latest commit */
    getSha(short?: boolean): Promise<string>;
    /** Get the SHA of the latest commit */
    shaExists(sha?: string): Promise<boolean>;
    /** Get the labels for a PR */
    getLabels(prNumber: number): Promise<string[]>;
    /** Get all the information about a PR or issue */
    getPr(prNumber: number): Promise<Octokit.Response<Octokit.IssuesGetResponse>>;
    /** Get information about specific commit */
    getCommit(sha: string): Promise<Octokit.Response<Octokit.ReposGetCommitResponse>>;
    /** Get the labels for a the project */
    getProjectLabels(): Promise<string[]>;
    /** Get the git log for a range of commits */
    getGitLog(start: string, end?: string): Promise<ICommit[]>;
    /** Get the GitHub user for an email. Will not work if they do not have their email set to "public". */
    getUserByEmail(email: string): Promise<{} | undefined>;
    /** Get collaborator permission level to the repo. */
    getTokenPermissionLevel(): Promise<{
        permission: string;
        user?: undefined;
    } | {
        permission: string;
        user: Octokit.UsersGetAuthenticatedResponse;
    }>;
    /** Get the GitHub user for a username */
    getUserByUsername(username: string): Promise<Octokit.UsersGetByUsernameResponse | undefined>;
    /** Get all the information about a PR or issue */
    getPullRequest(pr: number): Promise<Octokit.Response<Octokit.PullsGetResponse>>;
    /** Search to GitHub project's issue and pull requests */
    searchRepo(options: Octokit.SearchIssuesAndPullRequestsParams): Promise<Octokit.SearchIssuesAndPullRequestsResponse>;
    /** Run a graphql query on the GitHub project */
    graphql(query: string): Promise<import("@octokit/graphql/dist-types/types").GraphQlQueryResponseData>;
    /** Create a status (or checkmark) on a commit */
    createStatus(prInfo: IPRInfo): Promise<Octokit.Response<Octokit.ReposCreateStatusResponse>>;
    /** Add a label to the project */
    createLabel(label: ILabelDefinition): Promise<Octokit.Response<Octokit.IssuesCreateLabelResponse>>;
    /** Update a label on the project */
    updateLabel(label: ILabelDefinition): Promise<Octokit.Response<Octokit.IssuesUpdateLabelResponse>>;
    /** Add a label to and issue or pull request */
    addLabelToPr(pr: number, label: string): Promise<Octokit.Response<Octokit.IssuesAddLabelsResponse>>;
    /** Add a label to and issue or pull request */
    removeLabel(pr: number, label: string): Promise<Octokit.Response<Octokit.IssuesRemoveLabelResponse>>;
    /** Lock an issue */
    lockIssue(issue: number): Promise<Octokit.AnyResponse>;
    /** Get information about the GitHub project */
    getProject(): Promise<Octokit.ReposGetResponse>;
    /** Get all the pull requests for a project */
    getPullRequests(options?: Partial<Octokit.PullsListParams>): Promise<Octokit.PullsListResponse>;
    /** Get all the commits for a PR */
    getCommitsForPR(pr: number): Promise<Octokit.PullsListCommitsResponseItem[]>;
    /** Find a comment that is using the context in a PR */
    getCommentId(pr: number, context?: string): Promise<number>;
    /** Delete a comment on an issue or pull request */
    deleteComment(pr: number, context?: string): Promise<void>;
    /** Create a comment on an issue or pull request */
    createComment(message: string, pr: number, context?: string): Promise<Octokit.Response<Octokit.IssuesCreateCommentResponse>>;
    /** Edit a comment on an issue or pull request */
    editComment(message: string, pr: number, context?: string): Promise<Octokit.Response<Octokit.IssuesCreateCommentResponse>>;
    /** Create a comment on a pull request body */
    addToPrBody(message: string, pr: number, context?: string): Promise<Octokit.Response<Octokit.IssuesUpdateResponse>>;
    /** Create a release for the GitHub projecct */
    publish(releaseNotes: string, tag: string, prerelease?: boolean): Promise<Octokit.Response<Octokit.ReposCreateReleaseResponse>>;
    /** Get the latest tag in the git tree */
    getLatestTagInBranch(since?: string): Promise<string>;
    /** Get the tag before latest in the git tree */
    getPreviousTagInBranch(): Promise<string>;
    /** Get all the tags for a given branch. */
    getTags(branch: string): Promise<string[]>;
    /** Get the a tag that isn't in the base branch */
    getTagNotInBaseBranch(branch: string, options?: {
        /** Return the first tag not in baseBrach, defaults to last tag. */
        first?: boolean;
    }): Promise<string>;
    /** Get the last tag that isn't in the base branch */
    getLastTagNotInBaseBranch(branch: string): Promise<string>;
    /** Determine the pull request for a commit hash */
    matchCommitToPr(sha: string): Promise<{
        labels: string[];
        number: number;
        state: "MERGED" | "CLOSED" | "OPEN";
        body: string;
        headRefName: string;
        headRepositoryOwner: {
            login: string;
        };
    } | undefined>;
}
export {};
//# sourceMappingURL=git.d.ts.map