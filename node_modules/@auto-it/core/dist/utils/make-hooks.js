"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tapable_1 = require("tapable");
/** Make the hooks for "auto" */
exports.makeHooks = () => ({
    beforeRun: new tapable_1.SyncHook(["config"]),
    modifyConfig: new tapable_1.SyncWaterfallHook(["config"]),
    validateConfig: new tapable_1.AsyncSeriesBailHook(["name", "options"]),
    beforeShipIt: new tapable_1.AsyncSeriesHook(["context"]),
    afterAddToChangelog: new tapable_1.AsyncSeriesHook(["context"]),
    beforeCommitChangelog: new tapable_1.AsyncSeriesHook(["context"]),
    afterShipIt: new tapable_1.AsyncParallelHook(["version", "commits", "context"]),
    makeRelease: new tapable_1.AsyncSeriesBailHook(["releaseInfo"]),
    afterRelease: new tapable_1.AsyncParallelHook(["releaseInfo"]),
    onCreateRelease: new tapable_1.SyncHook(["options"]),
    onCreateChangelog: new tapable_1.SyncHook(["changelog", "version"]),
    onCreateLogParse: new tapable_1.SyncHook(["logParse"]),
    getAuthor: new tapable_1.AsyncSeriesBailHook(),
    getPreviousVersion: new tapable_1.AsyncSeriesBailHook(),
    getRepository: new tapable_1.AsyncSeriesBailHook(),
    version: new tapable_1.AsyncParallelHook(["version"]),
    afterVersion: new tapable_1.AsyncParallelHook(),
    publish: new tapable_1.AsyncParallelHook(["version"]),
    afterPublish: new tapable_1.AsyncParallelHook(),
    canary: new tapable_1.AsyncSeriesBailHook(["canaryVersion", "postFix"]),
    next: new tapable_1.AsyncSeriesWaterfallHook(["preReleaseVersions", "bump"]),
});
/** Make the hooks for "Release" */
exports.makeReleaseHooks = () => ({
    onCreateChangelog: new tapable_1.SyncHook(["changelog", "version"]),
    createChangelogTitle: new tapable_1.AsyncSeriesBailHook([]),
    onCreateLogParse: new tapable_1.SyncHook(["logParse"]),
});
/** Make the hooks for "LogParse" */
exports.makeLogParseHooks = () => ({
    parseCommit: new tapable_1.AsyncSeriesWaterfallHook(["commit"]),
    omitCommit: new tapable_1.AsyncSeriesBailHook(["commit"]),
});
/** Make the hooks for "InteractiveInit" */
exports.makeInteractiveInitHooks = () => ({
    writeRcFile: new tapable_1.AsyncSeriesBailHook(["rcFile"]),
    getRepo: new tapable_1.AsyncSeriesBailHook([]),
    getAuthor: new tapable_1.AsyncSeriesBailHook([]),
    createEnv: new tapable_1.AsyncSeriesWaterfallHook(["vars"]),
    configurePlugin: new tapable_1.AsyncSeriesBailHook(["pluginName"]),
});
/** Make the hooks for "Changelog" */
exports.makeChangelogHooks = () => ({
    addToBody: new tapable_1.AsyncSeriesWaterfallHook(["notes", "commits"]),
    renderChangelogLine: new tapable_1.AsyncSeriesWaterfallHook(["lineData"]),
    renderChangelogTitle: new tapable_1.AsyncSeriesBailHook(["commits", "lineRender"]),
    renderChangelogAuthor: new tapable_1.AsyncSeriesBailHook([
        "author",
        "commit",
        "options",
    ]),
    renderChangelogAuthorLine: new tapable_1.AsyncSeriesBailHook(["author", "user"]),
    omitReleaseNotes: new tapable_1.AsyncSeriesBailHook(["commit"]),
});
//# sourceMappingURL=make-hooks.js.map