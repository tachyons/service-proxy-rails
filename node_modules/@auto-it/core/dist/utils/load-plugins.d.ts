import Auto from "../auto";
import { ILogger } from "./logger";
import InteractiveInit from "../init";
export declare type IPluginConstructor = new (options?: any) => IPlugin;
/** A plugin to auto */
export interface IPlugin {
    /** The name to identify the plugin by */
    name: string;
    /** Called when running `auto init`. gives plugin ability to add custom init experience. */
    init?(initializer: InteractiveInit): void;
    /** Called when registering the plugin with auto */
    apply(auto: Auto): void;
}
export interface InstalledModule {
    /** The name of the module */
    name: string;
    /** The path to the module */
    path: string;
}
/** Get the paths of available installed plugins. */
export declare const getInstalledPlugins: (global?: boolean) => InstalledModule[];
/** Try to load a plugin in various ways */
export declare function findPlugin(pluginPath: string, logger: ILogger, extendedLocation?: string): string | undefined;
/** Try to load a plugin in various ways */
export declare function loadPlugin([pluginPath, options]: [string, any], logger: ILogger, extendedLocation?: string): IPlugin | undefined;
/** List some of the plugins available to auto */
export declare const listPlugins: ({ plugins }: {
    extends?: string | undefined;
    labels?: ({
        changelogTitle?: string | undefined;
        color?: string | undefined;
        description?: string | undefined;
        releaseType?: "none" | import("../semver").default.major | import("../semver").default.minor | import("../semver").default.patch | "skip" | "release" | undefined;
        overwrite?: boolean | undefined;
    } & {
        name: string;
    })[] | undefined;
    prereleaseBranches?: string[] | undefined;
    plugins?: (string | [string, any])[] | undefined;
    noVersionPrefix?: boolean | undefined;
    versionBranches?: string | boolean | undefined;
    comment?: {
        delete?: boolean | undefined;
        edit?: boolean | undefined;
    } | undefined;
    changelog?: {
        message?: string | undefined;
    } | undefined;
    release?: {
        prerelease?: boolean | undefined;
    } | undefined;
    shipit?: {
        onlyGraduateWithReleaseLabel?: boolean | undefined;
    } | undefined;
    canary?: {
        force?: boolean | undefined;
        message?: string | false | undefined;
    } | undefined;
    next?: {
        message?: string | undefined;
    } | undefined;
} & {
    repo?: string | undefined;
    owner?: string | undefined;
} & {
    githubApi?: string | undefined;
    githubGraphqlApi?: string | undefined;
    baseBranch?: string | undefined;
} & {
    name?: string | undefined;
    email?: string | undefined;
} & {
    onlyPublishWithReleaseLabel?: boolean | undefined;
} & {
    verbose?: boolean | [boolean, boolean] | undefined;
} & {
    labels: ({
        changelogTitle?: string | undefined;
        color?: string | undefined;
        description?: string | undefined;
        releaseType?: "none" | import("../semver").default.major | import("../semver").default.minor | import("../semver").default.patch | "skip" | "release" | undefined;
        overwrite?: boolean | undefined;
    } & {
        name: string;
    })[];
    prereleaseBranches: string[];
    baseBranch: string;
}, logger: ILogger, extendedLocation?: string | undefined) => Promise<void>;
//# sourceMappingURL=load-plugins.d.ts.map