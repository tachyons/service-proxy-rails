import { Auto, IPlugin } from "@auto-it/core";
import * as t from "io-ts";
declare const pluginOptions: t.PartialC<{
    /** Usernames to exclude from the contributors */
    exclude: t.ArrayC<t.StringC>;
    /** Globs to detect change types by */
    types: t.PartialC<Record<"blog" | "bug" | "business" | "code" | "content" | "design" | "doc" | "eventOrganizing" | "example" | "financial" | "fundingFinding" | "ideas" | "infra" | "maintenance" | "platform" | "plugin" | "projectManagement" | "question" | "review" | "security" | "talk" | "test" | "tool" | "translation" | "tutorial" | "userTesting" | "video", t.UnionC<[t.StringC, t.ArrayC<t.StringC>]>>>;
}>;
export declare type IAllContributorsPluginOptions = t.TypeOf<typeof pluginOptions>;
/** Automatically add contributors as changelogs are produced. */
export default class AllContributorsPlugin implements IPlugin {
    /** The name of the plugin */
    name: string;
    /** The options of the plugin */
    readonly options: Required<IAllContributorsPluginOptions>;
    /** Initialize the plugin with it's options */
    constructor(options?: IAllContributorsPluginOptions);
    /** Tap into auto plugin points. */
    apply(auto: Auto): void;
    /** Update the contributors rc for a package. */
    private updateContributors;
}
export {};
//# sourceMappingURL=index.d.ts.map